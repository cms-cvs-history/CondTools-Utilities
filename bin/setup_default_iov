#!/usr/bin/env python
import sys, os, os.path, string
from optparse import OptionParser
## expat handler function
import xml.parsers.expat
def start_element(name, attrs):
    if name == 'Class':
       global foundtable
       foundtable=attrs.get('table')

class setup_default_iov:
    def __init__(self): 
       self.parser =  OptionParser()
       self.xmlparser = xml.parsers.expat.ParserCreate('UTF-8')
       self.inputfile = None
       self.username = None
       self.password = None
       self.objectname = None      
       self.dictname = None
       self.dbname = None
       self.iovtag = None
       self.parsecmdln()
  
    def parsecmdln(self):
       usage = "usage: \%prog [-t|-c|-i|-u|-p|-h|-v] objectName dictionaryName dbName inputMappingFile\n"
       usage += "\n"
       usage +="arguments:\n"
       usage +="  objectName: name of object to be processed, e.g. Pedestals\n"
       usage +="  dbName: connection string to the database, format: technology[_protocol]://dbname[/schemaname], e.g. oracle://devdb10/MYSCHEMA; sqlite_file:my.db\n"
       usage +="  dictionaryName: name of dictionary containing the object, e.g.CondFormatsCalibration\n" 
       usage +="  inputMappingFile: input mapping file with path, format: [path]/[objectName]-mapping-[mappingversion].xml, e.g. Pedestals-mapping-1.0.xml\n"

       self.parser = OptionParser(usage)  
       self.parser.add_option("-t","--tag",action='store',type="string", dest="iovtag", help='iov tag name; [default] [objectName]-init' )      
       self.parser.add_option("-c","--catalog",action='store',type="string", dest="catalog", default='file:PoolFileCatalog.xml', help='Pool file catalog; [default] xmlcatalog_file://PoolFileCatalog.xml' )
       self.parser.add_option("-i","--infinit",action='store_true', dest="infinit", help='set to infinit IOV')
       self.parser.add_option("-u","--user",action='store',type="string", dest="username", default='', help='database user or account name' ) 
       self.parser.add_option("-p","--password",action='store',type="string", dest="password", default='', help='database password' ) 
       self.parser.add_option("-v","--verbose", action='store_true', dest="verbose", help='verbose mode')
       
       (options, args) = self.parser.parse_args()
       if len(args) != 4:
          self.parser.error("incorrect number of arguments, try -h for help") 
       if self.parser.values.iovtag:
           self.iovtag=self.parser.values.iovtag
       else:
           self.iovtag='-'.join([args[0],'init'])
       self.catalog=self.parser.values.catalog
       self.username=self.parser.values.username
       self.password=self.parser.values.password
       self.objectname=args[0]
       self.dictname=args[1]
       self.dbname=args[2]
       self.inputfile=args[3]
       if self.parser.values.verbose : print 'object: ',self.objectname
       if self.parser.values.verbose : print 'dictionary: ', self.dictname
       if self.parser.values.verbose : print 'dbconnect: ', self.dbname
       self.xmlparser.StartElementHandler = start_element
       self.xmlparser.ParseFile(open(self.inputfile,'r'))
       self.tablename = foundtable
       if self.parser.values.verbose : print 'input file: ',self.inputfile
       if self.parser.values.verbose : print 'mapping version: ',self.tablename

    def buildiov(self):
       fccmd=' '.join(['FCregisterPFN','-p',self.dbname, '-t','POOL_RDBMS','-u',self.parser.values.catalog])
       os.system(fccmd)
       if self.parser.values.infinit is True:
         print 'is infinit iov' 
         mycmd=' '.join(['cmscond_build_iov','-c',self.dbname,'-t',self.tablename,'-n',self.objectname, '-b','-d',self.dictname,'-T',self.iovtag])
       else:
         print 'is NOT infinit iov'
         mycmd=' '.join(['cmscond_build_iov','-c',self.dbname,'-t',self.tablename,'-n',self.objectname,'-d',self.dictname,'-T',self.iovtag])
       if self.parser.values.verbose : print mycmd
       os.system(mycmd)
       	
    def process(self):
       self.buildiov()
       
if __name__ == "__main__":
    a = setup_default_iov()
    a.process()