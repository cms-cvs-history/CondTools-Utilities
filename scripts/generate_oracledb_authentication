#!/usr/bin/env python
import sys, os, os.path, string
from optparse import OptionParser
from optparse import OptionValueError
## expat handler functions
import xml.parsers.expat
#---------------------------------------------------------------------
# generate authentication.xml according to authentication_template.xml 
# for Read-Only users of CMS conditions data oracle servers.
# The placeholder passwords in the template file will be replaced by
# the given ones for the given oracle service.  
# Note: This script does not cover authentication for private 
# and development databases. 
#vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
passwdlines=[]
xmlparser=xml.parsers.expat.ParserCreate()
global connectstr

def parsecmdline():
    usage="Usage: \%prog -h oracleservice -p password [-r]\n"
    optparser = OptionParser(usage)
    optparser.add_option("-s","--service",action='store',type="string", dest="service", default='', help='oracle service name(required)' ) 
    optparser.add_option("-p","--password",action='store',type="string", dest="password", default='', help='password to put in the authentication file(required)' ) 
    optparser.add_option("-i","--inputdir",action='store',type="string", dest="inputdir", default='.', help='directory contains the input template file' )
    optparser.add_option("-o","--outputdir",action='store',type="string", dest="outputdir", default='.', help='directory contains the output file' )
    (options, args) = optparser.parse_args()
    if optparser.has_option("--service") is not True:
        raise OptionValueError("missing option -s")
    if optparser.has_option("--password") is not True:
        raise OptionValueError("missing option -p")
    return optparser.values

cmdvalues=parsecmdline()
connectstr="oracle://"+cmdvalues.service.upper()+"/"
password=cmdvalues.password
inputdir=cmdvalues.inputdir
outputdir=cmdvalues.outputdir
fileInput='authentication_template.xml'
    
def start_element( name, attrs ):
    global findServer
    if name == 'connection':
       connectName = attrs.get('name')
       if connectName.find(connectstr) != -1:
         findServer=True
       else :
         findServer=False
    if name=='parameter' and findServer == True:
       if attrs.get('name')=='user' :
          schemaname=attrs.get('value')
       if attrs.get('name')=='password' :
          password=attrs.get('value')    
          passwdlines.append(xmlparser.CurrentLineNumber)
def replacePassword(inputline,newpass):
    result=inputline
    result='   <parameter name=\"password\" value='
    result+='\"'+newpass+'\"/>\n'	
    return result

if __name__ == "__main__":    
    xmlparser.StartElementHandler = start_element
    xmlparser.ParseFile(open(os.path.join(inputdir,fileInput))) 
    fileOutput=open(os.path.join(outputdir,'authentication.xml'), 'w')
    fileInput=open(os.path.join(inputdir,fileInput),'r')
    linecounter=1 
    for line in fileInput.readlines() :
      towrite=''
      if linecounter in passwdlines :
        towrite=replacePassword(line,password)
      else:
        towrite=line
      fileOutput.write(towrite)
      linecounter=linecounter+1
    fileInput.close()
    fileOutput.close()
